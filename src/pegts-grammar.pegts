grammar = _ rules:rule+;
rule : union sequence;
union = name:ident ":" _ cases:kase+ ";" _;
kase = kase:ident;
sequence = name:ident "=" _ terms:part+ ";" _;
part = field:field? stringy:"$"? term:term suffix:suffix?;
field = name:ident ":";
suffix = suffix:[+*?] _;
term : ref klass string1 string2;
ref = name:ident;
klass = "[" inverted:inverted? parts:classPart* "]" _;
inverted = "^";
classPart : range single;
range = from:classChar "-" to:classChar;
single = char:classChar;
classChar : classCharEscape classCharSimple;
classCharSimple = char:[^\\\[\]];
classCharEscape = "\\" char:[\\\[\]rnt];
string1 = "'" chars:string1Char* "'" _;
string1Char : string1CharEscape string1CharSimple;
string1CharSimple = char:[^'\\\r\n\t];
string1CharEscape = "\\" char:['\\rnt];
string2 = '"' chars:string2Char* '"' _;
string2Char : string2CharEscape string2CharSimple;
string2CharSimple = char:[^"\\\r\n\t];
string2CharEscape = "\\" char:["\\rnt];
ident = name:$identName _;
identName = [a-zA-Z_] [a-zA-Z0-9_]*;
_ = [ \t\r\n]*;